non-fluents nf_wildfire_inst_mdp__5000 {
	domain = wildfire_mdp;
	objects {
		x_pos : {x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11};
		y_pos : {y1,y2,y3,y4,y5};
	};
	non-fluents {
		NEIGHBOR(x1,y1,x1,y2);
		NEIGHBOR(x1,y1,x2,y1);
		NEIGHBOR(x1,y1,x2,y2);
		NEIGHBOR(x1,y2,x1,y1);
		NEIGHBOR(x1,y2,x1,y3);
		NEIGHBOR(x1,y2,x2,y1);
		NEIGHBOR(x1,y2,x2,y2);
		NEIGHBOR(x1,y2,x2,y3);
		NEIGHBOR(x1,y3,x1,y2);
		NEIGHBOR(x1,y3,x1,y4);
		NEIGHBOR(x1,y3,x2,y2);
		NEIGHBOR(x1,y3,x2,y3);
		NEIGHBOR(x1,y3,x2,y4);
		NEIGHBOR(x1,y4,x1,y3);
		NEIGHBOR(x1,y4,x1,y5);
		// Omitted: NEIGHBOR(x1,y4,x2,y3);
		// Omitted: NEIGHBOR(x1,y4,x2,y4);
		NEIGHBOR(x1,y4,x2,y5);
		NEIGHBOR(x1,y5,x1,y4);
		NEIGHBOR(x1,y5,x2,y4);
		NEIGHBOR(x1,y5,x2,y5);
		NEIGHBOR(x2,y1,x1,y1);
		NEIGHBOR(x2,y1,x1,y2);
		NEIGHBOR(x2,y1,x2,y2);
		NEIGHBOR(x2,y1,x3,y1);
		NEIGHBOR(x2,y1,x3,y2);
		NEIGHBOR(x2,y2,x1,y1);
		NEIGHBOR(x2,y2,x1,y2);
		NEIGHBOR(x2,y2,x1,y3);
		NEIGHBOR(x2,y2,x2,y1);
		NEIGHBOR(x2,y2,x2,y3);
		NEIGHBOR(x2,y2,x3,y1);
		NEIGHBOR(x2,y2,x3,y2);
		NEIGHBOR(x2,y2,x3,y3);
		NEIGHBOR(x2,y3,x1,y2);
		NEIGHBOR(x2,y3,x1,y3);
		NEIGHBOR(x2,y3,x1,y4);
		NEIGHBOR(x2,y3,x2,y2);
		NEIGHBOR(x2,y3,x2,y4);
		NEIGHBOR(x2,y3,x3,y2);
		NEIGHBOR(x2,y3,x3,y3);
		// Omitted: NEIGHBOR(x2,y3,x3,y4);
		NEIGHBOR(x2,y4,x1,y3);
		NEIGHBOR(x2,y4,x1,y4);
		NEIGHBOR(x2,y4,x1,y5);
		NEIGHBOR(x2,y4,x2,y3);
		NEIGHBOR(x2,y4,x2,y5);
		NEIGHBOR(x2,y4,x3,y3);
		NEIGHBOR(x2,y4,x3,y4);
		NEIGHBOR(x2,y4,x3,y5);
		NEIGHBOR(x2,y5,x1,y4);
		NEIGHBOR(x2,y5,x1,y5);
		NEIGHBOR(x2,y5,x2,y4);
		NEIGHBOR(x2,y5,x3,y4);
		NEIGHBOR(x2,y5,x3,y5);
		NEIGHBOR(x3,y1,x2,y1);
		NEIGHBOR(x3,y1,x2,y2);
		NEIGHBOR(x3,y1,x3,y2);
		// Omitted: NEIGHBOR(x3,y1,x4,y1);
		NEIGHBOR(x3,y1,x4,y2);
		NEIGHBOR(x3,y2,x2,y1);
		NEIGHBOR(x3,y2,x2,y2);
		NEIGHBOR(x3,y2,x2,y3);
		NEIGHBOR(x3,y2,x3,y1);
		NEIGHBOR(x3,y2,x3,y3);
		NEIGHBOR(x3,y2,x4,y1);
		NEIGHBOR(x3,y2,x4,y2);
		NEIGHBOR(x3,y2,x4,y3);
		// Omitted: NEIGHBOR(x3,y3,x2,y2);
		NEIGHBOR(x3,y3,x2,y3);
		NEIGHBOR(x3,y3,x2,y4);
		NEIGHBOR(x3,y3,x3,y2);
		NEIGHBOR(x3,y3,x3,y4);
		NEIGHBOR(x3,y3,x4,y2);
		NEIGHBOR(x3,y3,x4,y3);
		NEIGHBOR(x3,y3,x4,y4);
		NEIGHBOR(x3,y4,x2,y3);
		NEIGHBOR(x3,y4,x2,y4);
		// Omitted: NEIGHBOR(x3,y4,x2,y5);
		NEIGHBOR(x3,y4,x3,y3);
		NEIGHBOR(x3,y4,x3,y5);
		NEIGHBOR(x3,y4,x4,y3);
		NEIGHBOR(x3,y4,x4,y4);
		NEIGHBOR(x3,y4,x4,y5);
		NEIGHBOR(x3,y5,x2,y4);
		NEIGHBOR(x3,y5,x2,y5);
		NEIGHBOR(x3,y5,x3,y4);
		NEIGHBOR(x3,y5,x4,y4);
		NEIGHBOR(x3,y5,x4,y5);
		NEIGHBOR(x4,y1,x3,y1);
		NEIGHBOR(x4,y1,x3,y2);
		NEIGHBOR(x4,y1,x4,y2);
		NEIGHBOR(x4,y1,x5,y1);
		NEIGHBOR(x4,y1,x5,y2);
		NEIGHBOR(x4,y2,x3,y1);
		NEIGHBOR(x4,y2,x3,y2);
		NEIGHBOR(x4,y2,x3,y3);
		NEIGHBOR(x4,y2,x4,y1);
		NEIGHBOR(x4,y2,x4,y3);
		NEIGHBOR(x4,y2,x5,y1);
		NEIGHBOR(x4,y2,x5,y2);
		NEIGHBOR(x4,y2,x5,y3);
		NEIGHBOR(x4,y3,x3,y2);
		NEIGHBOR(x4,y3,x3,y3);
		NEIGHBOR(x4,y3,x3,y4);
		NEIGHBOR(x4,y3,x4,y2);
		NEIGHBOR(x4,y3,x4,y4);
		NEIGHBOR(x4,y3,x5,y2);
		NEIGHBOR(x4,y3,x5,y3);
		NEIGHBOR(x4,y3,x5,y4);
		NEIGHBOR(x4,y4,x3,y3);
		NEIGHBOR(x4,y4,x3,y4);
		NEIGHBOR(x4,y4,x3,y5);
		NEIGHBOR(x4,y4,x4,y3);
		NEIGHBOR(x4,y4,x4,y5);
		NEIGHBOR(x4,y4,x5,y3);
		NEIGHBOR(x4,y4,x5,y4);
		NEIGHBOR(x4,y4,x5,y5);
		NEIGHBOR(x4,y5,x3,y4);
		NEIGHBOR(x4,y5,x3,y5);
		NEIGHBOR(x4,y5,x4,y4);
		NEIGHBOR(x4,y5,x5,y4);
		NEIGHBOR(x4,y5,x5,y5);
		NEIGHBOR(x5,y1,x4,y1);
		NEIGHBOR(x5,y1,x4,y2);
		// Omitted: NEIGHBOR(x5,y1,x5,y2);
		NEIGHBOR(x5,y1,x6,y1);
		NEIGHBOR(x5,y1,x6,y2);
		// Omitted: NEIGHBOR(x5,y2,x4,y1);
		NEIGHBOR(x5,y2,x4,y2);
		NEIGHBOR(x5,y2,x4,y3);
		NEIGHBOR(x5,y2,x5,y1);
		NEIGHBOR(x5,y2,x5,y3);
		NEIGHBOR(x5,y2,x6,y1);
		NEIGHBOR(x5,y2,x6,y2);
		NEIGHBOR(x5,y2,x6,y3);
		NEIGHBOR(x5,y3,x4,y2);
		NEIGHBOR(x5,y3,x4,y3);
		NEIGHBOR(x5,y3,x4,y4);
		NEIGHBOR(x5,y3,x5,y2);
		NEIGHBOR(x5,y3,x5,y4);
		NEIGHBOR(x5,y3,x6,y2);
		NEIGHBOR(x5,y3,x6,y3);
		NEIGHBOR(x5,y3,x6,y4);
		// Omitted: NEIGHBOR(x5,y4,x4,y3);
		NEIGHBOR(x5,y4,x4,y4);
		NEIGHBOR(x5,y4,x4,y5);
		NEIGHBOR(x5,y4,x5,y3);
		NEIGHBOR(x5,y4,x5,y5);
		NEIGHBOR(x5,y4,x6,y3);
		NEIGHBOR(x5,y4,x6,y4);
		NEIGHBOR(x5,y4,x6,y5);
		NEIGHBOR(x5,y5,x4,y4);
		// Omitted: NEIGHBOR(x5,y5,x4,y5);
		NEIGHBOR(x5,y5,x5,y4);
		NEIGHBOR(x5,y5,x6,y4);
		NEIGHBOR(x5,y5,x6,y5);
		NEIGHBOR(x6,y1,x5,y1);
		NEIGHBOR(x6,y1,x5,y2);
		NEIGHBOR(x6,y1,x6,y2);
		NEIGHBOR(x6,y1,x7,y1);
		NEIGHBOR(x6,y1,x7,y2);
		NEIGHBOR(x6,y2,x5,y1);
		NEIGHBOR(x6,y2,x5,y2);
		// Omitted: NEIGHBOR(x6,y2,x5,y3);
		NEIGHBOR(x6,y2,x6,y1);
		NEIGHBOR(x6,y2,x6,y3);
		NEIGHBOR(x6,y2,x7,y1);
		NEIGHBOR(x6,y2,x7,y2);
		NEIGHBOR(x6,y2,x7,y3);
		// Omitted: NEIGHBOR(x6,y3,x5,y2);
		NEIGHBOR(x6,y3,x5,y3);
		NEIGHBOR(x6,y3,x5,y4);
		NEIGHBOR(x6,y3,x6,y2);
		NEIGHBOR(x6,y3,x6,y4);
		NEIGHBOR(x6,y3,x7,y2);
		// Omitted: NEIGHBOR(x6,y3,x7,y3);
		NEIGHBOR(x6,y3,x7,y4);
		NEIGHBOR(x6,y4,x5,y3);
		NEIGHBOR(x6,y4,x5,y4);
		NEIGHBOR(x6,y4,x5,y5);
		NEIGHBOR(x6,y4,x6,y3);
		NEIGHBOR(x6,y4,x6,y5);
		NEIGHBOR(x6,y4,x7,y3);
		NEIGHBOR(x6,y4,x7,y4);
		NEIGHBOR(x6,y4,x7,y5);
		NEIGHBOR(x6,y5,x5,y4);
		NEIGHBOR(x6,y5,x5,y5);
		NEIGHBOR(x6,y5,x6,y4);
		NEIGHBOR(x6,y5,x7,y4);
		NEIGHBOR(x6,y5,x7,y5);
		NEIGHBOR(x7,y1,x6,y1);
		NEIGHBOR(x7,y1,x6,y2);
		NEIGHBOR(x7,y1,x7,y2);
		NEIGHBOR(x7,y1,x8,y1);
		NEIGHBOR(x7,y1,x8,y2);
		NEIGHBOR(x7,y2,x6,y1);
		// Omitted: NEIGHBOR(x7,y2,x6,y2);
		NEIGHBOR(x7,y2,x6,y3);
		NEIGHBOR(x7,y2,x7,y1);
		NEIGHBOR(x7,y2,x7,y3);
		NEIGHBOR(x7,y2,x8,y1);
		NEIGHBOR(x7,y2,x8,y2);
		NEIGHBOR(x7,y2,x8,y3);
		NEIGHBOR(x7,y3,x6,y2);
		NEIGHBOR(x7,y3,x6,y3);
		NEIGHBOR(x7,y3,x6,y4);
		NEIGHBOR(x7,y3,x7,y2);
		NEIGHBOR(x7,y3,x7,y4);
		NEIGHBOR(x7,y3,x8,y2);
		NEIGHBOR(x7,y3,x8,y3);
		NEIGHBOR(x7,y3,x8,y4);
		NEIGHBOR(x7,y4,x6,y3);
		NEIGHBOR(x7,y4,x6,y4);
		NEIGHBOR(x7,y4,x6,y5);
		// Omitted: NEIGHBOR(x7,y4,x7,y3);
		NEIGHBOR(x7,y4,x7,y5);
		// Omitted: NEIGHBOR(x7,y4,x8,y3);
		NEIGHBOR(x7,y4,x8,y4);
		NEIGHBOR(x7,y4,x8,y5);
		NEIGHBOR(x7,y5,x6,y4);
		NEIGHBOR(x7,y5,x6,y5);
		NEIGHBOR(x7,y5,x7,y4);
		NEIGHBOR(x7,y5,x8,y4);
		NEIGHBOR(x7,y5,x8,y5);
		NEIGHBOR(x8,y1,x7,y1);
		NEIGHBOR(x8,y1,x7,y2);
		// Omitted: NEIGHBOR(x8,y1,x8,y2);
		NEIGHBOR(x8,y1,x9,y1);
		NEIGHBOR(x8,y1,x9,y2);
		NEIGHBOR(x8,y2,x7,y1);
		NEIGHBOR(x8,y2,x7,y2);
		NEIGHBOR(x8,y2,x7,y3);
		NEIGHBOR(x8,y2,x8,y1);
		NEIGHBOR(x8,y2,x8,y3);
		// Omitted: NEIGHBOR(x8,y2,x9,y1);
		NEIGHBOR(x8,y2,x9,y2);
		NEIGHBOR(x8,y2,x9,y3);
		NEIGHBOR(x8,y3,x7,y2);
		NEIGHBOR(x8,y3,x7,y3);
		NEIGHBOR(x8,y3,x7,y4);
		NEIGHBOR(x8,y3,x8,y2);
		NEIGHBOR(x8,y3,x8,y4);
		NEIGHBOR(x8,y3,x9,y2);
		NEIGHBOR(x8,y3,x9,y3);
		NEIGHBOR(x8,y3,x9,y4);
		NEIGHBOR(x8,y4,x7,y3);
		NEIGHBOR(x8,y4,x7,y4);
		NEIGHBOR(x8,y4,x7,y5);
		NEIGHBOR(x8,y4,x8,y3);
		NEIGHBOR(x8,y4,x8,y5);
		NEIGHBOR(x8,y4,x9,y3);
		NEIGHBOR(x8,y4,x9,y4);
		NEIGHBOR(x8,y4,x9,y5);
		NEIGHBOR(x8,y5,x7,y4);
		NEIGHBOR(x8,y5,x7,y5);
		NEIGHBOR(x8,y5,x8,y4);
		// Omitted: NEIGHBOR(x8,y5,x9,y4);
		NEIGHBOR(x8,y5,x9,y5);
		NEIGHBOR(x9,y1,x8,y1);
		NEIGHBOR(x9,y1,x8,y2);
		NEIGHBOR(x9,y1,x9,y2);
		NEIGHBOR(x9,y1,x10,y1);
		NEIGHBOR(x9,y1,x10,y2);
		// Omitted: NEIGHBOR(x9,y2,x8,y1);
		NEIGHBOR(x9,y2,x8,y2);
		NEIGHBOR(x9,y2,x8,y3);
		NEIGHBOR(x9,y2,x9,y1);
		NEIGHBOR(x9,y2,x9,y3);
		NEIGHBOR(x9,y2,x10,y1);
		NEIGHBOR(x9,y2,x10,y2);
		NEIGHBOR(x9,y2,x10,y3);
		NEIGHBOR(x9,y3,x8,y2);
		NEIGHBOR(x9,y3,x8,y3);
		NEIGHBOR(x9,y3,x8,y4);
		NEIGHBOR(x9,y3,x9,y2);
		NEIGHBOR(x9,y3,x9,y4);
		NEIGHBOR(x9,y3,x10,y2);
		NEIGHBOR(x9,y3,x10,y3);
		NEIGHBOR(x9,y3,x10,y4);
		NEIGHBOR(x9,y4,x8,y3);
		NEIGHBOR(x9,y4,x8,y4);
		NEIGHBOR(x9,y4,x8,y5);
		NEIGHBOR(x9,y4,x9,y3);
		NEIGHBOR(x9,y4,x9,y5);
		NEIGHBOR(x9,y4,x10,y3);
		NEIGHBOR(x9,y4,x10,y4);
		NEIGHBOR(x9,y4,x10,y5);
		NEIGHBOR(x9,y5,x8,y4);
		NEIGHBOR(x9,y5,x8,y5);
		NEIGHBOR(x9,y5,x9,y4);
		// Omitted: NEIGHBOR(x9,y5,x10,y4);
		NEIGHBOR(x9,y5,x10,y5);
		NEIGHBOR(x10,y1,x9,y1);
		NEIGHBOR(x10,y1,x9,y2);
		NEIGHBOR(x10,y1,x10,y2);
		NEIGHBOR(x10,y1,x11,y1);
		NEIGHBOR(x10,y1,x11,y2);
		// Omitted: NEIGHBOR(x10,y2,x9,y1);
		// Omitted: NEIGHBOR(x10,y2,x9,y2);
		NEIGHBOR(x10,y2,x9,y3);
		NEIGHBOR(x10,y2,x10,y1);
		NEIGHBOR(x10,y2,x10,y3);
		NEIGHBOR(x10,y2,x11,y1);
		// Omitted: NEIGHBOR(x10,y2,x11,y2);
		NEIGHBOR(x10,y2,x11,y3);
		NEIGHBOR(x10,y3,x9,y2);
		NEIGHBOR(x10,y3,x9,y3);
		NEIGHBOR(x10,y3,x9,y4);
		NEIGHBOR(x10,y3,x10,y2);
		NEIGHBOR(x10,y3,x10,y4);
		NEIGHBOR(x10,y3,x11,y2);
		NEIGHBOR(x10,y3,x11,y3);
		NEIGHBOR(x10,y3,x11,y4);
		NEIGHBOR(x10,y4,x9,y3);
		NEIGHBOR(x10,y4,x9,y4);
		NEIGHBOR(x10,y4,x9,y5);
		NEIGHBOR(x10,y4,x10,y3);
		// Omitted: NEIGHBOR(x10,y4,x10,y5);
		NEIGHBOR(x10,y4,x11,y3);
		NEIGHBOR(x10,y4,x11,y4);
		NEIGHBOR(x10,y4,x11,y5);
		NEIGHBOR(x10,y5,x9,y4);
		NEIGHBOR(x10,y5,x9,y5);
		NEIGHBOR(x10,y5,x10,y4);
		// Omitted: NEIGHBOR(x10,y5,x11,y4);
		NEIGHBOR(x10,y5,x11,y5);
		NEIGHBOR(x11,y1,x10,y1);
		NEIGHBOR(x11,y1,x10,y2);
		NEIGHBOR(x11,y1,x11,y2);
		NEIGHBOR(x11,y2,x10,y1);
		NEIGHBOR(x11,y2,x10,y2);
		NEIGHBOR(x11,y2,x10,y3);
		NEIGHBOR(x11,y2,x11,y1);
		NEIGHBOR(x11,y2,x11,y3);
		NEIGHBOR(x11,y3,x10,y2);
		NEIGHBOR(x11,y3,x10,y3);
		NEIGHBOR(x11,y3,x10,y4);
		// Omitted: NEIGHBOR(x11,y3,x11,y2);
		NEIGHBOR(x11,y3,x11,y4);
		NEIGHBOR(x11,y4,x10,y3);
		NEIGHBOR(x11,y4,x10,y4);
		NEIGHBOR(x11,y4,x10,y5);
		NEIGHBOR(x11,y4,x11,y3);
		NEIGHBOR(x11,y4,x11,y5);
		NEIGHBOR(x11,y5,x10,y4);
		NEIGHBOR(x11,y5,x10,y5);
		NEIGHBOR(x11,y5,x11,y4);
		TARGET(x2,y5);
		TARGET(x4,y3);
		TARGET(x6,y1);
		TARGET(x6,y4);
		TARGET(x7,y4);
		TARGET(x8,y3);
		TARGET(x9,y2);
		TARGET(x9,y4);
		TARGET(x10,y5);
		TARGET(x11,y1);
		TARGET(x11,y4);
	};
}

instance wildfire_inst_mdp__5000 {
	domain = wildfire_mdp;
	non-fluents = nf_wildfire_inst_mdp__5000;
	init-state {
		burning(x1,y2);
		burning(x2,y2);
		burning(x2,y3);
		burning(x3,y1);
		burning(x3,y4);
		burning(x4,y2);
		burning(x5,y2);
		burning(x9,y4);
	};

	max-nondef-actions = 1;
	horizon  = 100;
	discount = 1.0;
}
